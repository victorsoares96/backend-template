{
  "name": "serverless-express-template",
  "version": "1.1.1",
  "description": "A template for serverless-express",
  "main": "./src/lambda.js",
  "type": "commonjs",
  "config": {
    "s3BucketName": "serverless-express-template-bucket",
    "region": "us-east-1",
    "cloudFormationStackName": "serverless-express-template-stack",
    "functionName": "",
    "domain": "",
    "commitizen": {
      "path": "./node_modules/commitizen-emoji"
    },
    "commitizenEmoji": {
      "conventionalFormat": true
    }
  },
  "scripts": {
    "dev": "cross-env DEBUG=http NODE_ENV=development ts-node-dev -r tsconfig-paths/register --inspect --transpile-only --ignore-watch node_modules src/app.local",
    "dev:migration:run": "cross-env NODE_ENV=development typeorm-ts-node-commonjs migration:run -d src/database/index.ts",
    "dev:migration:revert": "cross-env NODE_ENV=development typeorm-ts-node-commonjs migration:revert -d src/database/index.ts",
    "prod": "cross-env DEBUG=http NODE_ENV=production node dist/app.local",
    "prod:migration:run": "cross-env NODE_ENV=production typeorm-ts-node-commonjs migration:run -d src/database/index.ts",
    "prod:migration:revert": "cross-env NODE_ENV=production typeorm-ts-node-commonjs migration:revert -d src/database/index.ts",
    "typeorm": "typeorm-ts-node-commonjs",
    "migration:generate": "cross-env NODE_ENV=development typeorm-ts-node-commonjs migration:generate -d src/database/index.ts",
    "prebuild": "yarn type-check",
    "build": "babel src --extensions \".js,.ts\" --out-dir dist --copy-files",
    "postbuild": "npm set-script prepare '' && cp -R src/views dist/ && cp package*json dist/ && cp -R src/assets dist/ && npm set-script prepare 'husky install'",
    "test": "cross-env NODE_ENV=test mocha",
    "test:watch": "npm test -- -- -w",
    "test:coverage": "jest",
    "prettier:format": "prettier --write .",
    "lint": "eslint ./src/ --ext .ts,.js,.json",
    "lint:fix": "eslint --fix ./src/ --ext .ts,.js,.json",
    "type-check": "tsc -p tsconfig.build.json --noEmit --pretty",
    "create-bucket": "cross-var aws s3 mb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-bucket": "cross-var aws s3 rb s3://$npm_package_config_s3BucketName --region $npm_package_config_region",
    "delete-stack": "cross-var aws cloudformation delete-stack --stack-name $npm_package_config_cloudFormationStackName --region $npm_package_config_region",
    "invoke-lambda": "cross-var aws lambda invoke --function-name $npm_package_config_functionName --region $npm_package_config_region --cli-binary-format raw-in-base64-out --payload file://api-gateway-event.json lambda-invoke-response.json && cat lambda-invoke-response.json",
    "local": "ts-node-dev -r tsconfig-paths/register --inspect --transpile-only --ignore-watch node_modules scripts/local",
    "sam:build": "sam build --template ./sam-template.yaml",
    "sam:deploy": "cross-var sam deploy --stack-name $npm_package_config_cloudFormationStackName --capabilities CAPABILITY_IAM --s3-bucket $npm_package_config_s3BucketName --s3-prefix $npm_package_name --parameter-overrides ParameterKey=DomainName,ParameterValue=$npm_package_config_domain --region $npm_package_config_region --no-fail-on-empty-changeset",
    "package-deploy": "npm run build && npm run sam:build && npm run sam:deploy",
    "advise": "echo Pass this env vars to lambda with command: \"\n\" aws lambda update-function-configuration --function-name my-function --environment 'Variables={BUCKET=my-bucket,KEY=file.txt}' \"\n\" && cat .env | tr '\n' ','",
    "setup": "npm install && (cross-var aws s3api get-bucket-location --bucket $npm_package_config_s3BucketName --region $npm_package_config_region || npm run create-bucket) && npm run package-deploy && npm run advise",
    "prepare": "husky install"
  },
  "license": "Apache-2.0",
  "dependencies": {
    "@vendia/serverless-express": "4.10.1",
    "axios": "0.27.2",
    "bcryptjs": "2.4.3",
    "body-parser": "1.17.1",
    "celebrate": "15.0.1",
    "class-validator": "0.13.2",
    "compression": "1.6.2",
    "cors": "2.8.3",
    "dotenv": "16.0.1",
    "ejs": "3.1.6",
    "escape-html": "1.0.3",
    "express": "4.17.1",
    "express-async-errors": "3.1.1",
    "jsonwebtoken": "8.5.1",
    "mysql2": "2.3.3",
    "reflect-metadata": "0.1.13",
    "source-map-support": "0.5.19",
    "tslib": "2.3.1",
    "typeorm": "0.3.7",
    "winston": "^3.8.1",
    "winston-loki": "^6.0.6"
  },
  "devDependencies": {
    "@babel/cli": "7.18.10",
    "@babel/core": "7.18.13",
    "@babel/node": "7.18.10",
    "@babel/plugin-proposal-decorators": "7.18.10",
    "@babel/preset-env": "7.18.10",
    "eslint": "8.23.0",
    "mocha": "10.0.0",
    "supertest": "6.2.4",
    "@types/mocha": "9.1.1",
    "@types/chai": "4.3.3",
    "chai": "4.3.6",
    "@types/supertest": "2.0.12",
    "@types/ejs": "3.1.1",
    "@types/compression": "1.7.2",
    "@babel/preset-typescript": "7.18.6",
    "@types/aws-lambda": "8.10.101",
    "@types/bcryptjs": "2.4.2",
    "@types/cors": "2.8.12",
    "@types/express": "4.17.13",
    "@types/jsonwebtoken": "8.5.8",
    "@types/node": "18.0.6",
    "@types/validator": "13.7.4",
    "@typescript-eslint/eslint-plugin": "5.30.7",
    "@typescript-eslint/parser": "5.30.7",
    "aws-lambda": "1.0.7",
    "babel-plugin-module-resolver": "4.1.0",
    "babel-plugin-transform-typescript-metadata": "0.3.2",
    "commitizen": "4.2.5",
    "commitizen-emoji": "1.0.5",
    "cross-env": "7.0.3",
    "cross-var": "1.1.0",
    "eslint-config-airbnb-base": "15.0.0",
    "eslint-config-airbnb-typescript": "17.0.0",
    "eslint-config-prettier": "8.5.0",
    "eslint-plugin-import": "2.26.0",
    "eslint-plugin-prettier": "4.2.1",
    "husky": "8.0.1",
    "lint-staged": "13.0.3",
    "prettier": "2.7.1",
    "ts-node": "10.9.1",
    "ts-node-dev": "2.0.0",
    "tsconfig-paths": "4.0.0",
    "typescript": "4.7.4",
    "@types/escape-html": "1.0.2"
  }
}
